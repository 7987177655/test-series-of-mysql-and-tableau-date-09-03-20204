Q.1 What are SQL dialects? Give some examples?


SQL (Structured Query Language) dialects are variations or implementations of SQL that are specific to different database management systems (DBMS) or database products. While most SQL dialects adhere to the ANSI SQL standard to some degree, they often include vendor-specific extensions or syntax.

Some examples of SQL dialects include:

a ) - MySQL: Developed by Oracle Corporation, MySQL uses a specific SQL dialect that includes various extensions and optimizations.

b ) - PostgreSQL: An open-source relational database management system, PostgreSQL has its own SQL dialect that is known for its advanced features and compliance with SQL standards.

c ) - Microsoft SQL Server: Developed by Microsoft, SQL Server uses T-SQL (Transact-SQL) as its SQL dialect, which includes additional features and syntax compared to standard SQL.

d ) - Oracle Database: Oracle Database uses PL/SQL (Procedural Language/SQL) as its SQL dialect, which includes procedural language extensions for more complex operations.

e ) - SQLite: A lightweight, embedded database engine, SQLite uses a simplified version of SQL that is compatible with most SQL standards but lacks some advanced features found in other SQL dialects.

These dialects can vary in syntax, supported features, and performance optimizations, so it's important to be familiar with the specific dialect used by the database you are working with.


Q.2 What are the main applications of SQL?

SQL (Structured Query Language) is primarily used for managing and manipulating data in relational database management systems (RDBMS). Some of the main applications of SQL include:

a ) - Data Querying: SQL is used to retrieve data from a database using queries. Users can specify the criteria for selecting data and the structure of the output.

b ) - Data Manipulation: SQL can be used to insert, update, and delete records in a database. This allows users to modify the data stored in the database.

c ) - Database Schema Creation and Modification: SQL can be used to create and modify the structure of a database, including tables, indexes, and relationships between tables.

d ) - Data Definition Language (DDL) Operations: SQL includes commands for defining the structure of a database, such as creating tables and specifying constraints.

e ) - Data Control Language (DCL) Operations: SQL includes commands for controlling access to data in a database, such as granting and revoking permissions.

f ) - Data Transaction Control: SQL supports transactions, which allow multiple SQL operations to be grouped together and executed as a single unit. This ensures data integrity and consistency.

g ) - Data Analysis and Reporting: SQL is often used for data analysis and reporting tasks, such as aggregating data, calculating statistics, and generating reports.

h ) - Data Migration and ETL (Extract, Transform, Load): SQL can be used to migrate data between databases and to perform ETL operations, such as transforming data from one format to another.

Overall, SQL is a powerful language for managing and manipulating data in relational databases, and it is widely used in a variety of applications, including web development, data analysis, and business intelligence.


Q.3 What is an SQL statement? Give some examples?

An SQL (Structured Query Language) statement is a command used to interact with a database. SQL statements are used for various purposes, such as querying data, inserting or updating records, creating or modifying database objects, and controlling access to data. Here are some examples of SQL statements:

SELECT statement: Used to retrieve data from one or more tables in a database.

INSERT statement: Used to insert new records into a table.

UPDATE statement: Used to update existing records in a table.

DELETE statement: Used to delete records from a table.

CREATE TABLE statement: Used to create a new table in the database.


Q.4 What types of SQL commands (or SQL subsets) do you know?Give some examples of common SQL commands of each type?


There are several types of SQL commands or subsets of SQL that are commonly used. Here are some examples of each type:

a ) - Data Query Language (DQL):

SELECT: Retrieves data from one or more tables.

b ) - Data Definition Language (DDL):

CREATE: Creates database objects such as tables, indexes, or views.

ALTER: Modifies existing database objects.

c ) - Data Manipulation Language (DML):

INSERT: Inserts new records into a table.

UPDATE: Modifies existing records in a table.

DELETE: Deletes records from a table.

d ) - Data Control Language (DCL):

GRANT: Grants permissions to users or roles.

REVOKE: Revokes permissions from users or roles.

e ) - Transaction Control Language (TCL):

COMMIT: Saves all changes made during the current transaction.

ROLLBACK: Undoes all changes made during the current transaction.

f ) - Data Definition Commands:

CREATE TABLE: Creates a new table in the database

DROP TABLE: Deletes a table and all its data from the database.

These are some common types of SQL commands or subsets of SQL, each serving a specific purpose in managing and manipulating data in a database.


Q.5 What is a database?What is DBMS, and what types of DBMS do you know?


A database is a structured collection of data that is organized and stored in a way that enables efficient access, retrieval, and management. It can store a wide range of information, from simple lists to complex data structures, and is commonly used in applications ranging from small personal projects to large-scale enterprise systems.

DBMS (Database Management System) is software that is used to interact with databases. It provides an interface for users and applications to interact with the database, allowing them to perform tasks such as querying data, updating records, and managing database objects. Some common types of DBMS include:

a ) - Relational DBMS (RDBMS): This type of DBMS organizes data into tables with rows and columns, where each row represents a record and each column represents a field. Examples include MySQL, PostgreSQL, Oracle Database, and Microsoft SQL Server.

b ) - NoSQL DBMS: NoSQL databases are designed to store and manage large volumes of unstructured data. They are often used for big data and real-time applications. Examples include MongoDB, Cassandra, and Redis.

c ) - Object-Oriented DBMS (OODBMS): OODBMS stores data in the form of objects, which are instances of classes defined in an object-oriented programming language. Examples include db4o and ObjectDB.

d ) - Graph DBMS: Graph databases are designed to store and manage graph structures, which consist of nodes, edges, and properties. They are often used for applications that require complex relationships between data entities. Examples include Neo4j and Amazon Neptune.

e ) - Time-Series DBMS: Time-series databases are optimized for storing and querying time-stamped data, such as sensor data, financial data, and IoT data. Examples include InfluxDB and TimescaleDB.

f ) - NewSQL DBMS: NewSQL databases combine the scalability of NoSQL databases with the ACID compliance of traditional RDBMS. They are designed to handle large-scale transactional workloads. Examples include CockroachDB and Google Spanner.

These are some common types of DBMS, each designed to meet specific requirements and use cases. The choice of DBMS depends on factors such as the nature of the data, scalability requirements, and the need for transactional consistency.



Q.6 What are tables and fields in SQL?

In SQL (Structured Query Language), a table is a structured collection of data organized into rows and columns. Each row in a table represents a record, and each column represents a different attribute or field of the record. Tables are used to store related data in a database in a structured format.

Fields in SQL refer to the columns of a table. Each field represents a specific attribute of the data being stored. For example, in a table storing information about employees, fields could include "employee_id," "first_name," "last_name," "email," and "hire_date."


Q.7 What is an SQL query, and what types of queries do you know?

An SQL (Structured Query Language) query is a command used to retrieve data from a database. It allows users to specify the criteria for selecting data and the structure of the output. SQL queries are used to interact with databases and perform operations such as retrieving, updating, inserting, and deleting data.

Some common types of SQL queries include:

a ) - SELECT Queries: Used to retrieve data from one or more tables. SELECT queries can specify which columns to retrieve, filter rows based on conditions, and sort the result set.

b ) - INSERT Queries: Used to insert new records into a table.

c ) - UPDATE Queries: Used to update existing records in a table.

d ) - DELETE Queries: Used to delete records from a table.

e ) - JOIN Queries: Used to combine rows from two or more tables based on a related column between them.

f ) - Subquery or Nested Queries: A query nested inside another query, used to retrieve data based on the result of the inner query.

g ) - Aggregate Queries: Used to perform aggregate functions such as SUM, COUNT, AVG, MIN, and MAX on a set of values.

h ) - Grouping Queries: Used to group rows that have the same values in specified columns.

i ) - Conditional Queries: Used to retrieve data based on specified conditions

These are just a few examples of the types of SQL queries that can be used to interact with a database. SQL queries can be highly customized to meet specific requirements and are a powerful tool for working with data.


Q.8 What is a subquery? What types of SQL subqueries do you know?

A subquery in SQL is a query nested inside another query. It can be used to retrieve data based on the result of the inner query. Subqueries are enclosed in parentheses and can be used in SELECT, INSERT, UPDATE, or DELETE statements.

There are several types of SQL subqueries, including:

a ) - Scalar Subquery: A subquery that returns a single value, which can be used as an expression in the outer query.

b ) - Row Subquery: A subquery that returns a single row of data, which can be used as a value in the outer query.

c ) - Column Subquery: A subquery that returns a single column of data, which can be used as a value in the outer query.

d ) - Correlated Subquery: A subquery that depends on the outer query, where the inner query references a column from the outer query.

e ) - Nested Subquery: A subquery that contains another subquery.

Subqueries are useful for performing complex queries and can be used to filter, aggregate, or manipulate data in various ways. They allow for more dynamic and flexible querying of databases.

Q.9 What is a constraint, and why use constraints?What SQL constraints do you know?

In SQL, a constraint is a rule or condition that is enforced on a column or a set of columns in a table. Constraints ensure the accuracy, integrity, and consistency of data in a database. They help maintain the quality of data by preventing invalid or inconsistent data from being inserted or updated in a table.

There are several types of SQL constraints:

a )  - NOT NULL Constraint: Ensures that a column cannot contain NULL values.

b ) - UNIQUE Constraint: Ensures that all values in a column or a set of columns are unique.

c ) - PRIMARY KEY Constraint: Combines the NOT NULL and UNIQUE constraints to create a unique identifier for each record in a table.

d ) - FOREIGN KEY Constraint: Enforces a relationship between two tables by ensuring that the values in a column (or columns) of one table match the values in a column (or columns) of another table.

e ) - CHECK Constraint: Ensures that all values in a column meet a specific condition.

f ) - DEFAULT Constraint: Specifies a default value for a column if no value is provided during an INSERT operation.


Constraints help ensure data integrity and consistency in a database by enforcing rules on the data stored in tables. They are essential for maintaining data quality and preventing errors or inconsistencies in the database.

Q.10 What is a join?What types of joins do you know?

In SQL, a join is used to combine rows from two or more tables based on a related column between them. Joins are used to retrieve data that is spread across multiple tables in a database and combine it into a single result set.

There are several types of joins in SQL:

a ) INNER JOIN: Returns rows when there is at least one match in both tables based on the join condition.

b ) - LEFT JOIN (or LEFT OUTER JOIN): Returns all rows from the left table, and the matched rows from the right table. If there is no match, NULL values are used for the columns from the right table.

c ) - RIGHT JOIN (or RIGHT OUTER JOIN): Returns all rows from the right table, and the matched rows from the left table. If there is no match, NULL values are used for the columns from the left table

d ) - FULL JOIN (or FULL OUTER JOIN): Returns rows when there is a match in one of the tables. It combines the results of both LEFT JOIN and RIGHT JOIN. If there is no match, NULL values are used for the columns from the table without a match.


e ) - CROSS JOIN: Returns the Cartesian product of the two tables, i.e., all possible combinations of rows from both tables. It does not require a join condition.

f ) - SELF JOIN: A join where a table is joined with itself. This is useful for comparing rows within the same table.

Each type of join has its own specific use case and can be used to retrieve different types of data from multiple tables in a database.



Q.11 What is a primary key?What is a foreign key?What is a unique key?

In SQL, a primary key is a column or a set of columns that uniquely identifies each record in a table. It ensures that each row in the table is uniquely identified and that the key does not contain NULL values. A primary key constraint is used to define a primary key for a table.

A foreign key is a column or a set of columns in a table that establishes a relationship with another table. It ensures referential integrity by enforcing that the values in the foreign key column(s) match the values in the primary key column(s) of the referenced table. A foreign key constraint is used to define a foreign key in a table.

A unique key is a constraint that ensures that all values in a column or a set of columns are unique, similar to a primary key. However, unlike a primary key, a unique key can contain NULL values (but only one NULL value is allowed). Unique keys are used to enforce the uniqueness of values in a column(s) but do not necessarily serve as the primary identifier for a record.


In summary, a primary key uniquely identifies each record in a table, a foreign key establishes a relationship between tables, and a unique key ensures the uniqueness of values in a column(s) while allowing NULL values.


Q.12 What is an index?What types of indexes do you know?


In SQL, an index is a data structure that improves the speed of data retrieval operations on a database table at the cost of additional space and slower inserts, updates, and deletes. Indexes are created on one or more columns of a table and allow the database engine to quickly locate rows based on the indexed columns.


a ) -  Single-Column Index: An index created on a single column of a table.

b ) - Composite Index: An index created on multiple columns of a table. It is useful when queries often involve conditions on multiple columns.

c ) - Unique Index: An index that enforces the uniqueness of values in one or more columns, similar to a unique key constraint.

d ) - Clustered Index: In some database systems (e.g., SQL Server), a clustered index determines the physical order of data rows in a table. A table can have only one clustered index.

e ) - Non-Clustered Index: An index that does not affect the physical order of data rows in a table. It is stored separately from the actual data rows.

f ) - Bitmap Index: An index that uses bitmaps to represent the presence or absence of rows with particular values in a column. It is efficient for columns with a low cardinality (a small number of distinct values).

Indexes are used to improve the performance of SELECT queries by reducing the number of rows that need to be scanned. However, they can also impact the performance of INSERT, UPDATE, and DELETE operations, as the indexes need to be maintained whenever the data in the indexed columns changes. Therefore, indexes should be used judiciously based on the specific requirements and usage patterns of the database.


Q.13 - What is a schema?What is a SQL comment?

In SQL, a schema is a collection of database objects (such as tables, views, indexes, etc.) that are associated with a particular database user. It provides a way to organize and group database objects into logical groups, making it easier to manage and maintain the database. A schema also defines the structure of the database, including the organization of tables and the relationships between them.

In some database management systems (DBMS), such as PostgreSQL and MySQL, a schema is also used to define namespaces for database objects, allowing multiple users to have their own separate collections of objects within the same database.

Example of creating a schema in SQL:

CREATE SCHEMA schema_name;

A SQL comment is a way to add explanatory notes or annotations to SQL code. Comments are ignored by the SQL engine and are used to document the code for developers or other users. SQL comments can be single-line or multi-line, and they help improve the readability and maintainability of SQL code.

Example of single-line comment in SQL:

-- This is a single-line comment

Example of multi-line comment in SQL:

/*
This is a
multi-line comment
*/


In SQL, a schema is a collection of database objects (such as tables, views, indexes, etc.) that are associated with a particular database user. It provides a way to organize and group database objects into logical groups, making it easier to manage and maintain the database. A schema also defines the structure of the database, including the organization of tables and the relationships between them.

In some database management systems (DBMS), such as PostgreSQL and MySQL, a schema is also used to define namespaces for database objects, allowing multiple users to have their own separate collections of objects within the same database.

Example of creating a schema in SQL:

sql
Copy code
CREATE SCHEMA schema_name;
A SQL comment is a way to add explanatory notes or annotations to SQL code. Comments are ignored by the SQL engine and are used to document the code for developers or other users. SQL comments can be single-line or multi-line, and they help improve the readability and maintainability of SQL code.

Example of single-line comment in SQL:

sql
Copy code
-- This is a single-line comment
Example of multi-line comment in SQL:

sql
Copy code
/*
This is a
multi-line comment
*/
Comments are useful for explaining the purpose of SQL statements, documenting changes or updates, and providing additional context for the code.


Q.14 What is a SQL operator?What types of SQL operators do you know?

In SQL, an operator is a symbol or keyword that is used to perform operations on one or more values or expressions. Operators are used in SQL queries to manipulate data, perform calculations, and compare values. There are several types of SQL operators, including:

a ) - Arithmetic Operators: Used to perform mathematical operations on numeric values.

Addition (+)
Subtraction (-)
Multiplication (*)
Division (/)
Modulus (%)

b ) - Comparison Operators: Used to compare two values or expressions.

Equal to (=)
Not equal to (<> or !=)
Greater than (>)
Greater than or equal to (>=)
Less than (<)
Less than or equal to (<=)

c ) - Logical Operators: Used to combine multiple conditions in a SQL statement.

AND: Returns true if both conditions are true.
OR: Returns true if at least one of the conditions is true.
NOT: Negates a condition, i.e., returns true if the condition is false.

d ) - Concatenation Operator: Used to concatenate (combine) two or more strings into a single string.

In MySQL and PostgreSQL, the concatenation operator is ||.
In SQL Server, the concatenation operator is +.

e ) - Bitwise Operators: Used to perform bitwise operations on binary values.

Bitwise AND (&)
Bitwise OR (|)
Bitwise XOR (^)
Bitwise NOT (~)
Bitwise left shift (<<)
Bitwise right shift (>>)

f ) - IN Operator: Used to specify multiple values in a WHERE clause.

Returns true if a value matches any value in a list.
Example: SELECT * FROM table_name WHERE column_name IN (value1, value2, ...)

g ) - LIKE Operator: Used to search for a specified pattern in a column.

Allows the use of wildcards (%) to represent any number of characters and (_) to represent a single character.
Example: SELECT * FROM table_name WHERE column_name LIKE 'pattern'

These are some of the common SQL operators used in SQL queries to perform various operations on data. Each operator serves a specific purpose and is used in different contexts within SQL statements.


Q.15 What is an alias?What is a clause?


In SQL, an alias is a temporary name assigned to a table or a column in a query. Aliases are used to make the output of a query more readable or to provide a shorter or more meaningful name for a table or column.

Example of using aliases for columns:


SELECT column1 AS alias1, column2 AS alias2 FROM table_name;

Example of using aliases for tables (also known as table aliases):

SELECT t1.column1, t2.column2 FROM table1 AS t1 JOIN table2 AS t2 ON t1.id = t2.id;


In these examples, AS is optional and can be omitted. Aliases are especially useful when working with complex queries involving multiple tables and columns, as they can make the query easier to understand and maintain.

A clause in SQL is a part of a SQL statement that specifies conditions for selecting or manipulating data. Clauses are used to filter, sort, group, or limit the results of a query. Some common SQL clauses include:

a ) - WHERE Clause: Used to filter rows based on specified conditions.

SELECT * FROM table_name WHERE condition;

b ) - ORDER BY Clause: Used to sort the result set based on one or more columns.

SELECT * FROM table_name ORDER BY column1 ASC, column2 DESC;

c ) - GROUP BY Clause: Used to group rows that have the same values in specified columns.

GROUP BY Clause: Used to group rows that have the same values in specified columns.

d ) - HAVING Clause: Used to filter groups of rows returned by a GROUP BY clause.

SELECT column1, COUNT(*) FROM table_name GROUP BY column1 HAVING COUNT(*) > 1;

e ) - LIMIT Clause: Used to limit the number of rows returned by a query.

SELECT * FROM table_name LIMIT 10;

f ) - OFFSET Clause: Used with the LIMIT clause to skip a specified number of rows before returning the result set.

SELECT * FROM table_name LIMIT 10 OFFSET 5;

Clauses are essential components of SQL statements and are used to customize the behavior of queries to meet specific requirements.


Q.16 What are some common statements used with the SELECT query?

In SQL, the SELECT query is used to retrieve data from one or more tables. There are several common statements that are often used with the SELECT query to customize the result set or perform specific operations. Some of these statements include:

1 ) - DISTINCT: Used to retrieve unique values from a column in the result set.

SELECT DISTINCT column1 FROM table_name;

2 ) - COUNT: Used to count the number of rows or non-NULL values in a column.

SELECT COUNT(*) FROM table_name;

3  ) - SUM: Used to calculate the sum of values in a column.

SELECT SUM(column1) FROM table_name;

4 ) - AVG: Used to calculate the average of values in a column.

SELECT AVG(column1) FROM table_name;

5 ) - MIN: Used to find the minimum value in a column.


SELECT MIN(column1) FROM table_name;

6 ) - MAX: Used to find the maximum value in a column.

SELECT MAX(column1) FROM table_name;

7 ) - WHERE: Used to filter rows based on specified conditions.


SELECT * FROM table_name WHERE column1 = value;

8 ) - ORDER BY: Used to sort the result set based on one or more columns.


SELECT * FROM table_name ORDER BY column1 ASC, column2 DESC;

9 ) - GROUP BY: Used to group rows that have the same values in specified columns.

SELECT column1, COUNT(*) FROM table_name GROUP BY column1;

10 ) - HAVING: Used to filter groups of rows returned by a GROUP BY clause.

SELECT column1, COUNT(*) FROM table_name GROUP BY column1 HAVING COUNT(*) > 1;

These statements can be combined with the SELECT query to customize the result set and perform various operations on the data.

 Q.17 How to create a table?How to update a table?How to delete a table from a database?

To create a table in SQL, you use the CREATE TABLE statement followed by the table name and the definition of its columns and constraints. Here's a basic example:

CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
);

To update a table in SQL, you use the ALTER TABLE statement followed by the table name and the specific alteration you want to make. Here's an example of adding a new column to an existing table:

ALTER TABLE table_name
ADD column_name datatype;

To delete a table from a database in SQL, you use the DROP TABLE statement followed by the table name. Be careful, as this operation permanently deletes the table and all its data. Here's an example:

DROP TABLE table_name;
These are basic examples, and there are many more options and clauses available for creating, updating, and deleting tables in SQL.

Q.18 How to select common records from two tables?

To select common records from two tables, you can use the INNER JOIN clause to join the tables on a common column and retrieve the rows where the values in that column match. Here's a basic example:

SELECT table1.column1, table2.column2
FROM table1

INNER JOIN table2 ON table1.common_column = table2.common_column;

In this example, table1 and table2 are the names of the tables you want to join, common_column is the column that is common to both tables, and column1 and column2 are the columns you want to select from each table. Adjust the column names and table names to match your specific scenario.


Q.19 What are entities? Give some examples.What are relationships? Give some examples.What is NULL value? How is it different from zero or a blank space?


In the context of databases and SQL, entities refer to the objects or things about which data is stored. Each entity typically corresponds to a table in a database. Entities have attributes (columns) that describe the characteristics or properties of the entity.

Examples of entities include:

Employee: Attributes could include employee ID, name, email, and department.

Product: Attributes could include product ID, name, price, and category.

Customer: Attributes could include customer ID, name, email, and address.

Relationships in databases define how entities are related to each other. There are different types of relationships, including:


One-to-One: Each record in one table is related to only one record in another table.

One-to-Many: Each record in one table is related to multiple records in another table.

Many-to-Many: Multiple records in one table are related to multiple records in another table.

Examples of relationships include:

An employee belongs to one department, but a department can have many employees (One-to-Many).

A customer can place many orders, but each order is placed by one customer (One-to-Many).

A student can enroll in multiple courses, and a course can have multiple students (Many-to-Many).

A NULL value in SQL represents a missing or unknown value. It is different from zero or a blank space, which are specific values. NULL is used to indicate 

that a value is not applicable or not known.

For example, if a customer has not provided an email address, the email address field for that customer may contain a NULL value. In contrast, if the email address field contains an empty string (''), it means that the customer intentionally left the field blank. Similarly, if a numeric field contains a NULL value, it means that the value is unknown or not applicable, whereas zero (0) is a specific numeric value.


Q.20 What is a function in SQL, and why use functions?What types of SQL functions do you know?What aggregate functions do you know?What scalar functions do you know?What are case manipulation functions? Give some examples. What are character manipulation functions? Give some examples?


In SQL, a function is a predefined set of logic that takes one or more inputs, performs some operation, and returns a result. Functions are used to simplify complex operations, improve code readability, and avoid repetition of code. There are several types of functions in SQL, including:

1 ) - Aggregate Functions: These functions operate on a set of values and return a single value. Common aggregate functions include SUM, COUNT, AVG, MIN, and MAX.

2 ) - Scalar Functions: These functions operate on a single value and return a single value. Examples include UPPER, LOWER, LENGTH, ROUND, and CONCAT.

3 ) - Case Manipulation Functions: These functions are used to manipulate the case of characters in a string. Examples include UPPER, LOWER, and INITCAP (which capitalizes the first letter of each word).

4 ) - Character Manipulation Functions: These functions are used to manipulate characters in a string. Examples include SUBSTRING (to extract a substring from a string), TRIM (to remove leading and trailing spaces), and REPLACE (to replace a substring with another substring).

Here are some examples of case manipulation functions:

UPPER: Converts a string to uppercase.

SELECT UPPER('hello') AS result;
-- Output: 'HELLO'
LOWER: Converts a string to lowercase.

SELECT LOWER('Hello') AS result;
-- Output: 'hello'

INITCAP: Capitalizes the first letter of each word in a string.

SELECT INITCAP('hello world') AS result;
-- Output: 'Hello World'


Here are some examples of character manipulation functions:

SUBSTRING: Extracts a substring from a string.

SELECT SUBSTRING('hello world', 1, 5) AS result;
-- Output: 'hello'
TRIM: Removes leading and trailing spaces from a string.
SELECT TRIM(' hello ') AS result;
-- Output: 'hello'
REPLACE: Replaces a substring with another substring in a string.

SELECT REPLACE('hello world', 'world', 'everyone') AS result;
-- Output: 'hello everyone'

These functions can be used to manipulate strings and perform various operations on them in SQL queries.



















